@mixin clearfix {
  &::after {
    content: ""; // For it to appear in the page
    display: table; // Standard
    clear: both; // The property that actually clears the floats
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER

// Ranges:
/*
0-600px:      Phone

600-900:      Tablet portrait

900-1200:     Tablet landscape

[1200 - 1800] this is where our normal styles apply

1800 + :      Big desktop, for this we will write a min width media query of course.
*/

// The @content directive allows us to pass an entire block of code into the mixin and not just arguments.

// @mixin respond-phone {
//   @media (max-width: 600px) {
//     @content;
//   }
// }
/*

Best and final solution, in this mixin we are going to pass a breakpoint as an argument.
Breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop
*/

// The if directive @if - just to make conditions
// To make the units conversion remember that rems fail in some browsers, that's why we use em.

// Remember that we set the font-size to 62.5% in order to facilitate the application of rems. 16px is the default, so if we want to work with 10px we set it to 62.5%.

// In media queries, em and rem are NOT affected by our root font-size setting, 62.5%. This means that, in media queries, 1rem or 1em is always = 16px (font-size that is coming from the browser).
// So, we need to convert each media query into em: 600/16 so on and so forth.

@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media (max-width: 37.5em) {
      // 600px
      @content;
    }
  }
  @if $breakpoint == tab-port {
    @media (max-width: 56.25em) {
      // 900px
      @content;
    }
  }
  @if $breakpoint == tab-land {
    @media (max-width: 75em) {
      // 1200px
      @content;
    }
  }
  @if $breakpoint == big-desktop {
    @media (min-width: 112.5em) {
      // 1800px
      @content;
    }
  }
}
