/*
COLORS



*/

// Custom css variables/properties

:root {
  --color-white: #fff;
  // Primary colors
  --color-primary: #eb2f64;
  --color-primary-light: #ff3366;
  --color-primary-dark: #ba265d;

  // Light grey colors
  --color-grey-light-1: #faf9f9;
  --color-grey-light-2: #f4f2f2; // For container background color
  --color-grey-light-3: #f0eeee;
  --color-grey-light-4: #ccc;

  // Dark grey colors
  --color-grey-dark-1: #333;
  --color-grey-dark-2: #777; // For text
  --color-grey-dark-3: #999;

  // Box-shadows

  --shadow-dark: 0 2rem 6rem rgba(0, 0, 0, 0.3);

  --shadow-light: 0 2rem 5rem rgba(0, 0, 0, 0.06);

  // Boarder
  --line: 1px solid var(--color-grey-light-2);
}
// Media queries
// Remember that we cannot use custom css variables to use in media queries, we need to use sass variables that we cannot define in the root.

$break-point-largest: 75em; // 1200px / 16px(1em), again remember that this has nothing to do with the font-size hack that we do in our html. Here we just removed the margin.

$break-point-large: 68.75em; // 1100px / 16px, Decreased the font-size here in the html (list and photos getting to new lines).

$break-point-medium: 56.25em; // 900px - moved the side bar to the top.

$break-point-small: 37.5em; // 600px

$break-point-smallest: 31.25em; // 500px - used just to change the search bar, it looks better without this query, but there is more about flexbox.
// This is a use case for the order property in flexbox. First, we want it to be the last element in the container, then we set the container to wrap, so that the elements are allowed to wrap if there is not enough space.

* {
  margin: 0;
  padding: 0;
}

html {
  font-size: 62.5%;
  box-sizing: border-box;

  //////// MEDIA QUERY ////////
  @media only screen and (max-width: $break-point-large) {
    // We decrease from 10px to 8px
    font-size: 50%; // 8/16 = 0.5 - we also need to fix the max-width in the container.
  }
}

*,
*::before,
*::after {
  box-sizing: inherit;
}
body {
  font-family: "Open Sans", sans-serif;
  font-weight: 400;
  line-height: 1.6;
  color: var(--color-grey-dark-2);

  // Remember that, in the beginning, we don't have nothing on the body, so it doesn't have a height. It we just write a word on the body and set the background-image, it will repeat the gradient through out the viewport.
  // There are two fixes for this, either we set the background-repeat to no-repeat (not very useful because it will just be related to the size of the content) or we give it a height. In our case we give it a min-height because later it will be bigger than the viewport height.
  background-image: linear-gradient(
    to right bottom,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  background-size: cover;
  background-repeat: no-repeat;
  min-height: 100vh;
}
