/////////////// LOGO ///////////////

.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

/////////////// SEARCH BAR ///////////////
.search {
  // background-color: orangered; // Testing
  flex: 0 0 40%;

  display: flex; // A flex item becoming a flex container in order to align the button and the input
  align-items: center;
  justify-content: center;

  &__input {
    // remember that input elements don't inherit font-family, the font-size, text color etc
    font-family: inherit;
    font-size: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    color: inherit; // From body, the color when we write.
    padding: 0.7rem 2rem;
    border-radius: 100px; // high number for the rounded edges.
    width: 90%; // we don't set it to 100 because there is an animation on focus.
    transition: all 0.2s;
    margin-right: -3.25rem; // So that the button move on top of the input.

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    // To make changes on the placeholder
    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // Using the adjacent selector to set the background color of the button to be the same as we have for the focused input. Whenever the input is on focus select the adjacent sibling and ...

  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    // Same background color as input because it will be on top of it.
    background-color: var(--color-grey-light-2);
    transition: all 0.2s;

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    // Changing the color of the icon
    fill: var(--color-grey-dark-3);
  }
}

/////////////// USER NAVIGATION ///////////////

.user-nav {
  //background-color: greenyellow; // Testing
  display: flex;

  // Remember that we've set the header to align items to the center (vertically), but in the individual case of the user nav, we want it to be self-aligned to stretch (we don't want it to be aligned to the center). We still need the items to be aligned to the center (we do this for all of them with the direct children selector), but we need to overwrite the alignment coming from the header with align-self.

  // align-items: center; // Vertically
  align-self: stretch;

  // In order to give space between the three boxes we use the direct children selector and select them all.
  & > * {
    // first some padding
    padding: 0 2rem;
    cursor: pointer;
    // For the hover effect to work from top to bottom we just need to give them a height
    height: 100%;

    // Here is where we set the three boxes to flex, so we can align them vertically inside of the parent that is now stretched.

    display: flex;
    align-items: center;
  }
  // Then we take care of the hover effect for all of them
  & > *:hover {
    background-color: var(--color-grey-light-2);
    // At this point things don't work as expected because the height of the entire navigation bar is given by the taller element (photo - we gave it a height below).
    // But what we want is that the user-nav occupies all the space from the top of the header to the bottom. This is achieved by self-aligning the user-nav to stretch.
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    // Color of the icon with fill
    fill: var(--color-grey-dark-2);
  }
  &__notification {
    // to make it smaller
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%; // Doesn't look like a perfect circle but a very high px number (100px) does the same.
    background-color: var(--color-primary);
    color: var(--color-white);
    // To align, flex-box works with text also, not only when we have child elements.
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 1.5rem;
    right: 1.11rem;
  }

  // &__user {
  // } we've already styled it with the child selector above

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

  // &__user-name {
  // } no style to be applied
}

/////////////// SIDE BAR ///////////////

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  &__item {
    position: relative; // for the before pseudo element

    &:not(:last-child) {
      margin-bottom: 0.5rem;
    }
  }

  // Before the side nav item we want to add a pseudo element for the hover effect. It is the line that first is shown and then expands through out the item.

  &__item::before {
    content: ""; // Must be here always
    position: absolute;
    top: 0;
    left: 0;
    height: 100%; // To be the same of the item
    width: 3px; // Just have this width when it appears
    background-color: var(--color-primary);

    // We only want this to appear when the item in hovered, so we set the initial state to 0.
    transform: scaleY(0);
    // transform-origin: bottom; // If we wanted the animation to start on the bottom instead of the default center.

    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;
    // Notice the ability for setting different settings for different properties. We need the delay on the width in order to first see the transform scale with 3px, and only after the expansion.
    // The delay should of course be the same as the transform.
  }

  // When the item is hovered do this to the pseudo element AND if the item contains the class (modifier) --active do the same thing to the before element. So, the active state should be the same as the hover state.
  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1); // Same as 100%
    width: 100%; // for the expansion
  }

  // As for the active state (when the user clicks) we just change the background color.

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    text-decoration: none;
    text-transform: uppercase;
    color: var(--color-grey-light-1);
    // display: block; // To make the space between them. Overwritten with flex when we center.
    padding: 1.5rem 3rem;
    position: relative; // Just so the z-index works
    z-index: 1; // For the link to be on top of the before pseudo-element.

    display: flex;
    align-items: center;
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    // fill: var(--color-grey-light-1); we want the same color as the link, but instead of copying it we can use currentColor. currentColor is the color of the current element or the parent element. By not specifying the color here, it means that it will get the same color specified in the parent element.
    fill: currentColor;
  }
}

.legal {
  font-size: 1.2rem;
  text-align: center;
  color: var(--color-grey-dark-4);
  padding: 2.5rem;
}

/////////////// HOTEL VIEW GALLERY ///////////////

.gallery {
  display: flex;
  &__item {
  }

  &__photo {
    // Flexible images, hence the percentages.
    width: 100%;

    // Remember that images are inline elements, so they are treated as text, just as any other element with the display set to inline. This is done because when text is added to the page, some room is made by the browser for the descender (the next text). In order to remove it we just need to set the display to block - flex set in the parent (__item) also would work.
    display: block;
  }
}

/////////////// HOTEL VIEW OVERVIEW ///////////////

.overview {
  display: flex;
  align-items: center; // Along the cross
  border-bottom: var(--line);
  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 5rem;
  }
  &__stars {
    //flex: 1; when we were trying to give that space in the middle, but with margin auto in much better.
    // Remember this technique, it is better explained in the html.
    margin-right: auto;

    // Remember that the stars weren't vertically aligned perfectly inside of their container (there was more space in the bottom). This means that they behave like inline elements, producing the same space like we had in the images.
    // The solution is to set this container (parent) to flex.
    display: flex;
  }
  &__icon-star,
  &__icon-location {
    // Same as before
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__icon-location {
    margin-right: 0.5rem; // space between the icon and the button
  }

  &__location {
    font-size: 1.2rem; // So that the button (text) can inherit it
    display: flex;
    align-items: center; // Remember that the default is stretch
  }

  &__rating {
    background-color: var(--color-primary);
    margin-left: 3rem; // Space between the button
    color: var(--color-white);
    padding: 0 2.25rem;
    align-self: stretch; // All of them are centered in the parent, but we overwrite this one so that we can set it to occupy the hole height of the parent, remember that this is already a flex item.

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;

    // It seems like the space between the average and the count in bigger then the margin bottom, so to decrease it we can set a negative margin
    margin-bottom: -3px;
  }
  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;
  }
}

// This button is/can be treated as a new component because we are going to use it later.
.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit; // Set to inherit because this is a component (reusability), so it will inherit the font-size of it's parent element.
  padding-bottom: 2px; // To separate the text from the border.
  display: inline-block; // WHY???
  background-color: transparent; // Reusability, to have the same background of where is placed.
  border-bottom: 1px solid currentColor; // Notice again the currentColor, this time is the color that we set here, and change after in the hover.

  cursor: pointer;
  transition: all 0.2s;

  // For the button in the user-reviews!!! We want all the styles to be applied in the same way, however, we want that the span moves away from the text on hover.
  // This is to give it a left margin on normal state:
  & span {
    margin-left: 3px;
    transition: margin-left 0.2s;
  }
  // Now we could write things in two ways:
  // &:hover span {
  //   margin-left: 8px;
  // }
  // Or inside of the hover that we've had already. On hover, if there is a span do this:
  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  // New animation on focus
  &:focus {
    // outline: none; // Removes the blue border

    // In order to create that pulsating animation we use the keyframes @ rule, just like we've used with the h1 on natours.
    animation: pulsate 1s infinite;
  }
}

// In the beginning nothing happens normally, so the best strategy to build animations is either to start at the middle or the end, so that we know what we need to do to reset at 0%. Of course it depends on how we want the animation to be.

@keyframes pulsate {
  0% {
    // No scale and no shadow
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    // We scale it and give it a shadow at 50%
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    // No scale and no shadow
    transform: scale(1);
    box-shadow: none;
  }
}

/////////////// HOTEL VIEW DETAIL ///////////////

// At this point, remember that the content overflowed the container, that's because we've set a fix height for the entire hotel view while testing.
// By removing it the content defines the size of the container.

// The detail, description and user reviews is in the layout

// PARAGRAPH
// .paragraph:not(:last-child) Remember that we want to give a margin bottom to all the paragraphs except for the last one.
// last-child does not work because it represents the last element among a group of sibling elements. So we need to use :last-of-type

.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

// LIST
// The list has a margin and a line on top and bottom, it has four of the items in each side and also an icon.

.list {
  list-style: none;
  margin: 3rem 0; // Space outside
  padding: 3rem 0; // Some inner space too.
  border-top: var(--line);
  border-bottom: var(--line);

  // In order to create the columns with 4 items in each side we use flexbox.
  display: flex;
  // However, what this is going to do is try to place these elements beside one another (cram), but, since there is not enough space, the words of each item stay on top of the other (in columns).
  // By allowing them to wrap, they wrap into new lines, spread in "rows".
  flex-wrap: wrap;
  // Now we just need to give the same fixed width to each of the items

  &__item {
    // Like this, we give half of the available space to each of the items, making them stay side by side.
    flex: 0 0 50%;
    margin-bottom: 0.7rem;

    // Including an svg directly in css is similar to what we did with images, with background image but we need to do it in a before pseudo-element. It is a better practice than put it here in the item directly.
  }

  &__item::before {
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;

    // for older browsers (we can't change the color of the svg when we use them like this with background images)
    //background-image: url(../img/chevron-thin-right.svg); // Up one level because we are not in the html now.\
    //background-size: cover;

    // FOR newer browsers we use MASKS - a mask defines an area where we can look through the element and see what is behind it.
    // First we define the background color.
    background-color: var(--color-primary);
    // Now we put the mask on top of this and, only in the positions where the icon is, we will be able to look through. this is similar to clipping
    -webkit-mask-image: url(../img/chevron-thin-right.svg);
    -webkit-mask-size: cover;
    mask-image: url(../img/chevron-thin-right.svg);
    mask-size: cover;
  }
}

// RECOMMEND

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  display: flex;
  align-items: center;
  // justify-content: space-between; We could do it like this, but this time he uses the margin right to auto technique. Same result but remember because with justify-content we would save a selector here.

  &__count {
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    box-sizing: content-box; // default so that the border is added on top of the height and width that we establish.
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    // When we add the border, the image shrinks, that's because we set the box-sizing to border-box (includes the padding and the border into the width and height of the element).
    // To fix this we have two options, either we add the 3px of the border to the height and width or we can set it automatically by changing the box sizing.
    border: 3px solid var(--color-white);

    &:not(:last-child) {
      margin-right: -1.5rem;
    }
  }
}

/////////////// HOTEL VIEW REVIEWS ///////////////
// Don't forget that the main container is already in the layout (user-reviews)

.review {
  // Font size set in the parent (layout) so that we inherit here.
  background-color: var(--color-white);
  box-shadow: var(--shadow-light);
  padding: 3rem; // Same as the left container
  margin-bottom: 3.5rem; // Vertical space between both reviews and the element that comes next.

  // for the pseudo element
  position: relative;
  overflow: hidden; // hides the part of the quote mark
  &__text {
    margin-bottom: 2rem;
    z-index: 2; // IMPORTANT - in order fot the z-index to work we MUST set the position of the element.
    position: relative;
  }

  &__user {
    display: flex;
    // margin-top: 3rem; instead he gave margin bottom to the __text
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    text-transform: uppercase;
    font-weight: 600;
    margin-bottom: 0.4rem;
  }

  &__user-date {
    font-size: 1rem;
    // font-weight: 300; he used the color
    color: var(--color-grey-dark-3);
  }

  &__rating {
    font-size: 2.2rem;
    color: var(--color-primary);
    font-weight: 300; // Just to compensate having a bigger font size.
  }

  // As for the " we create a before pseudo element before the review itself.

  &::before {
    content: "\201C"; // Notice how an html entity is used in css. In html we would just put &ldquo, but here we need to use the iso number
    position: absolute;
    // Negative so it gets outside of the container
    top: -2.8rem;
    left: -1rem;
    font-size: 20rem;
    line-height: 1; // This is text, so it inherits our line height which makes it huge.
    color: var(--color-grey-light-2);
    font-family: sans-serif; // We need to do this, otherwise it will inherit our font-family and not look like we want.
    z-index: 1;
  }

  // As for the button, it is the same as before, the changes are made there.
  // In order to center the button, one of the solutions is to set the display of the layout container to flex and the direction to column.
  // Everything stays the same of course, but the button now gets the same size (width) as the biggest element in the container because align items is set to stretch. When we change the main axis the element stretches to occupy all the available space.
  // All we need to do is to set align items to center in the layout container.
}
